version: '3'

services:
  reverse-proxy:
    image: "traefik:v2.3"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--entrypoints.web.address=:80"
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 8080
        published: 8080
        mode: host
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  whoami:
    image: "traefik/whoami"
    deploy:
      replicas: 5
      labels:
        - traefik.http.routers.whoami-service.rule=Host(`example.com`)
        - traefik.http.services.whoami-service.loadbalancer.server.port=80

  database:
    image: postgres:13.4-alpine
    environment:
      - POSTGRES_USER=hedgedoc
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=hedgedoc
    volumes:
      - database:/var/lib/postgresql/data
    restart: always

  identidock:
    build: .
    ports:
      - "5000:5000"
    networks:
      - identinet
    volumes:
      - "./app:/app"
    environment:
      - FLASK_APP=/app/identidock.py
      - FLASK_ENV=development
    command: flask run -h 0.0.0.0

  microblog:
    build: .
    ports:
      - "5001:5000"
    networks:
      - identinet
    volumes:
      - "./app:/app"
    environment:
      - FLASK_APP=/app/identidock.py
      - FLASK_ENV=development
    command: flask run -h 0.0.0.0
    depends_on:
      - database    

  app:
    image: quay.io/hedgedoc/hedgedoc:1.9.9
    environment:
      - CMD_DB_URL=postgres://hedgedoc:password@database:5432/hedgedoc
      - CMD_DOMAIN=localhost
      - CMD_URL_ADDPORT=true
    volumes:
      - uploads:/hedgedoc/public/uploads
    ports:
      - "3000:3000"
    restart: always
    depends_on:
      - database

  dnmonster:
    image: amouat/dnmonster:1.0
    labels:
      - "traefik.http.routers.dnmonster.rule=Host(`monster.localhost`)"
      - "traefik.http.routers.dnmonster.entrypoints=web"
    networks:
      - identinet
      - traefik-net

  redis:
    image: redis
    networks:
      - identinet

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    environment:
      - "discovery.seed_hosts=elasticsearch2"
      - "cluster.initial_master_nodes=elasticsearch,elasticsearch2"
    networks:
      - logging-network

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    environment:
      - "discovery.seed_hosts=elasticsearch"
      - "cluster.initial_master_nodes=elasticsearch,elasticsearch2"
    networks:
      - logging-network

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.5.0
    user: root
    depends_on:
      - elasticsearch
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - logging-network
    environment:
      - -strict.perms=false

  kibana:
    image: docker.elastic.co/kibana/kibana:7.5.0
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    networks:
      - logging-network
      
volumes:
  database:
  uploads:

networks:
  identinet:
    driver: bridge
  logging-network:
    driver: bridge
  traefik-net:
    external: true
